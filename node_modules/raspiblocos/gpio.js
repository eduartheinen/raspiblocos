var onoff = require('onoff').Gpio,
  //piblaster = require('pi-blaster.js'),
  Q = require('q');

var gpio = function gpio(number, direction) {
  var port = new onoff(number, direction || 'out');
  //var port = new onoff(number);

  return {

    getState: function getState() {
      var deferred = Q.defer(),
        res = port.readSync();

      if (res != undefined)
        deferred.resolve(res)
      else
        deferred.reject();

      return deferred.promise;
    },

    turnOn: function turnOn() {
      var deferred = Q.defer();
      port.writeSync(1);
      var res = port.readSync();

      if (res != undefined)
        deferred.resolve(res)
      else
        deferred.reject();

      return deferred.promise;
    },

    turnOff: function turnOff() {
      var deferred = Q.defer();
      port.writeSync(0);
      var res = port.readSync();

      if (res != undefined)
        deferred.resolve(res)
      else
        deferred.reject();

      return deferred.promise;
    },

    /*pwm: function pwm(value){
      var deferred = Q.defer();
      try{
        var res = piblaster.setPwm(port.gpio, value);
        console.log(res);

        if(res != undefined)
          deferred.resolve(res)

      } catch (e) {
        console.log(e);
        deferred.reject(e);
      }

      return deferred.promise;
    },*/

    toggle: function toggle() {
      var deferred = Q.defer();
      res = port.readSync();
      port.writeSync(res ^ 1);

      if (res != port.readSync())
        deferred.resolve(res)
      else
        deferred.reject();

      return deferred.promise;
    },

    unexport: function unexport() {
      var deferred = Q.defer();
      res = port.unexport();
      deferred.resolve(res);

      return deferred.promise;
    }
  }
}

module.exports = gpio;
